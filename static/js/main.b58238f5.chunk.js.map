{"version":3,"sources":["api.ts","atoms.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","routes/Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","a","fetch","json","response","data","slice","coinId","endDate","Math","floor","Date","now","startDate","ok","Error","isDarkState","atom","key","default","Chart","isDark","useRecoilValue","useQuery","then","res","fetchCoinHistory","isLoading","type","series","name","map","price","close","options","theme","mode","chart","background","height","width","toolbar","show","stroke","curve","grid","yaxis","xaxis","labels","categories","time_close","axisTicks","axisBorder","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","Price","fetchCoinPrice","console","log","x","open","high","low","enabled","Container","styled","div","Header","header","Title","h1","props","accentColor","Loader","span","Overview","bgColor","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","HomeBtn","Coin","state","useLocation","useParams","priceMatch","useMatch","chartMatch","fetchCoinInfo","refetchInterval","infoLoading","infoData","fetchCoinTickers","tickersLoading","tickersData","loading","Helmet","to","rank","symbol","quotes","USD","description","total_supply","max_supply","path","element","CoinsList","ul","li","coinLi","Text","Img","img","DarkToggleBtn","button","Coins","setIsDark","useSetRecoilState","onClick","pre","coin","id","src","toLowerCase","alt","Router","process","darkTheme","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.b58238f5.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport async function fetchCoins() {\n  const response = await (await fetch(`${BASE_URL}/coins`)).json();\n  const data = response.slice(0, 51);\n  return data;\n}\n\nexport function fetchCoinInfo(coinId?: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((res) => res.json());\n}\n\nexport function fetchCoinTickers(coinId?: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((res) => res.json());\n}\n\nexport function fetchCoinHistory(coinId?: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((res) => res.json());\n}\n\nexport async function fetchCoinPrice(coinId?: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 4;\n  const response = await fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  );\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  const json = response.json();\n  return json;\n}\n","import { atom } from \"recoil\";\n\nexport const isDarkState = atom({\n  key: \"dark\",\n  default: false,\n});\n","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkState } from \"../atoms\";\n\nexport interface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\nexport interface ChartProps {\n  coinId?: string;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n  const isDark = useRecoilValue(isDarkState);\n  const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading Chart\"\n      ) : (\n        <ApexChart\n          type=\"line\"\n          series={[\n            {\n              name: \"Price\",\n              data: data?.map((price) => price.close),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: isDark ? \"dark\" : \"light\",\n            },\n            chart: {\n              background: \"transparent\",\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n            },\n            stroke: {\n              curve: \"smooth\",\n              width: 5,\n            },\n            grid: {\n              show: false,\n            },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              type: \"datetime\",\n              labels: {\n                show: false,\n              },\n              categories: data?.map((price) => price.time_close),\n              axisTicks: { show: false },\n              axisBorder: { show: false },\n            },\n            fill: {\n              type: \"gradient\",\n              gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\n            },\n            colors: [\"#0fbcf9\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(3)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\nexport default Chart;\n","import { useQuery } from \"react-query\";\nimport { fetchCoinPrice } from \"../api\";\nimport { ChartProps, IHistorical } from \"./Chart\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkState } from \"../atoms\";\nimport styled from \"styled-components\";\n\ninterface IPriceHistorical {\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n}\n\nfunction Price({ coinId }: ChartProps) {\n  const isDark = useRecoilValue(isDarkState);\n  const { isLoading, data } = useQuery<IHistorical[]>([\"price\", coinId], () =>\n    fetchCoinPrice(coinId)\n  );\n  console.log(data?.map((price) => price));\n\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading...\"\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              data: data?.map((price) => {\n                return {\n                  x: price.time_close,\n                  y: [price.open, price.high, price.low, price.close].map(\n                    (price) => price.toFixed(3)\n                  ),\n                };\n              }),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: isDark ? \"dark\" : \"light\",\n            },\n            chart: {\n              background: \"transparent\",\n              height: 400,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n            },\n            grid: {\n              show: true,\n            },\n            yaxis: {\n              show: true,\n            },\n            xaxis: {\n              type: \"datetime\",\n              labels: {\n                show: false,\n              },\n              axisTicks: { show: false },\n              axisBorder: { show: false },\n            },\n            tooltip: {\n              enabled: true,\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\nexport default Price;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useLocation, useParams, Routes, Route, useMatch } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\nimport { Helmet } from \"react-helmet\";\n\nconst Container = styled.div`\n  position: relative;\n  max-width: 30em;\n  margin: auto;\n  padding: 0.8em;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 0.5em;\n`;\n\nconst Title = styled.h1`\n  font-size: 2rem;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  font-size: 1.25rem;\n`;\n\nconst Overview = styled.div`\n  -webkit-box-shadow: 0px 7px 15px 0px #000000;\n  box-shadow: 0px 7px 15px 0px #000000;\n  display: flex;\n  justify-content: space-between;\n  background-color: ${(props) => props.theme.bgColor};\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n  height: 1em;\n  line-height: 1em;\n`;\n\nconst Tab = styled.p<{ isActive: boolean }>`\n  -webkit-box-shadow: 0px 7px 15px 0px #000000;\n  box-shadow: 0px 7px 15px 0px #000000;\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 0.7rem;\n  font-weight: 400;\n  background-color: ${(props) => props.theme.bgColor};\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    display: block;\n    height: 100%;\n  }\n  &:active {\n    transform: scale(0.8);\n  }\n`;\n\nconst HomeBtn = styled.div`\n  width: 100%;\n  height: 1.8em;\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 0.5em;\n  transition: all 0.2s ease-in;\n  & button:hover {\n    color: whitesmoke;\n    background-color: ${(props) => props.theme.accentColor};\n  }\n  a {\n    display: block;\n    width: 5em;\n    height: 1.8em;\n    button {\n      font-size: 0.5rem;\n      border-radius: 15px;\n      background-color: ${(props) => props.theme.bgColor};\n      color: ${(props) => props.theme.textColor};\n    }\n  }\n`;\n\ninterface InfoDataInterface {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  contract: string;\n  platform: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\ninterface TickersDataInterface {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nconst Coin = () => {\n  const { state } = useLocation();\n  const { coinId } = useParams();\n  const priceMatch = useMatch(\"/:coinId/price\");\n  const chartMatch = useMatch(\"/:coinId/chart\");\n  const { isLoading: infoLoading, data: infoData } =\n    useQuery<InfoDataInterface>([\"info\", coinId], () => fetchCoinInfo(coinId), {\n      refetchInterval: 10000,\n    });\n\n  const { isLoading: tickersLoading, data: tickersData } =\n    useQuery<TickersDataInterface>([\"tickers\", coinId], () =>\n      fetchCoinTickers(coinId)\n    );\n\n  const loading = infoLoading || tickersLoading;\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Title>\n          {state?.name ? state.name : loading ? \"loading...\" : infoData?.name}\n        </Title>\n      </Header>\n      <HomeBtn>\n        <Link to=\"/\">\n          <button>Go Home</button>\n        </Link>\n      </HomeBtn>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price :</span>\n              <span>{tickersData?.quotes.USD.price.toFixed(3)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Supply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to=\"chart\">Chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to=\"price\">Price</Link>\n            </Tab>\n          </Tabs>\n\n          <Routes>\n            <Route path=\"price\" element={<Price coinId={coinId} />} />\n            <Route path=\"chart\" element={<Chart coinId={coinId} />} />\n          </Routes>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Coin;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nimport { isDarkState } from \"../atoms\";\n\nconst Container = styled.div`\n  position: relative;\n  max-width: 30em;\n  margin: auto;\n  padding: 0.8em;\n`;\n\nconst Header = styled.header`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CoinsList = styled.ul`\n  padding: 0 1.25em;\n`;\n\nconst Coin = styled.li`\n  -webkit-box-shadow: 0px 7px 15px 0px #000000;\n  box-shadow: 0px 7px 15px 0px #000000;\n  background-color: ${(props) => props.theme.coinLi};\n  color: ${(props) => props.theme.textColor};\n  margin-bottom: 0.8em;\n  border-radius: 15px;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 1.25em;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Text = styled.p``;\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  font-size: 1.25rem;\n`;\n\nconst Img = styled.img`\n  width: 1.5em;\n  height: 1.5em;\n  margin-right: 0.5em;\n`;\n\nconst DarkToggleBtn = styled.button`\n  position: absolute;\n  top: 1.5em;\n  right: 0.5em;\n  font-size: 0.5rem;\n  padding: 0.5em;\n  border-radius: 15px;\n  background-color: transparent;\n  color: ${(props) => props.theme.textColor};\n  transition: all 0.2s ease-in;\n  &:hover {\n    color: whitesmoke;\n    background-color: ${(props) => props.theme.accentColor};\n  }\n`;\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nconst Coins = () => {\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n  const setIsDark = useSetRecoilState(isDarkState);\n  const DarkBtn = () => {\n    setIsDark((pre) => !pre);\n  };\n  return (\n    <Container>\n      <Helmet>\n        <title>Coins</title>\n      </Helmet>\n      <Header>\n        <Title>Coins</Title>\n      </Header>\n      <DarkToggleBtn onClick={DarkBtn}>ToggleBtn</DarkToggleBtn>\n      {isLoading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {data?.map((coin) => (\n            <Coin key={coin.id}>\n              <Link to={`/${coin.id}`} state={{ name: coin.name }}>\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                  alt=\"logo\"\n                />\n                <Text>{coin.name} &rarr;</Text>\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n};\n\nexport default Coins;\n","import { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Coin from \"./Coin\";\nimport Coins from \"./Coins\";\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path={process.env.PUBLIC_URL + \"/\"} element={<Coins />} />\n        <Route path=\"/:coinId/*\" element={<Coin />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  coinLi: \"#353b48\",\n  textColor: \"#f5f6fa\",\n  accentColor: \"#c23616\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  coinLi: \"#f5f6fa\",\n  textColor: \"#black\",\n  accentColor: \"#c23616\",\n};\n","import React from \"react\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./routes/Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkState } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@200;400;600;700&display=swap');\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\n\n* { \n  box-sizing: border-box;\n}\n\nbody {\n\tline-height: 1;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n}\n\na { \n  text-decoration: none;\n  color: inherit;\n}\n\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkState);\n\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}